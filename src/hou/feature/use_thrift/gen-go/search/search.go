// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package search

import (
	"bytes"
	"database/sql/driver"
	"errors"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type SearchField int64

const (
	SearchField_AUTHOR SearchField = 0
	SearchField_TITLE  SearchField = 1
)

func (p SearchField) String() string {
	switch p {
	case SearchField_AUTHOR:
		return "AUTHOR"
	case SearchField_TITLE:
		return "TITLE"
	}
	return "<UNSET>"
}

func SearchFieldFromString(s string) (SearchField, error) {
	switch s {
	case "AUTHOR":
		return SearchField_AUTHOR, nil
	case "TITLE":
		return SearchField_TITLE, nil
	}
	return SearchField(0), fmt.Errorf("not a valid SearchField string")
}

func SearchFieldPtr(v SearchField) *SearchField { return &v }

func (p SearchField) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *SearchField) UnmarshalText(text []byte) error {
	q, err := SearchFieldFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *SearchField) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = SearchField(v)
	return nil
}

func (p *SearchField) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type SortSpec int64

const (
	SortSpec_SCORE           SortSpec = 0
	SortSpec_TIME_DESC       SortSpec = 1
	SortSpec_TIME_ASC        SortSpec = 2
	SortSpec_CRAWL_TIME_DESC SortSpec = 3
	SortSpec_CRAWL_TIME_ASC  SortSpec = 4
)

func (p SortSpec) String() string {
	switch p {
	case SortSpec_SCORE:
		return "SCORE"
	case SortSpec_TIME_DESC:
		return "TIME_DESC"
	case SortSpec_TIME_ASC:
		return "TIME_ASC"
	case SortSpec_CRAWL_TIME_DESC:
		return "CRAWL_TIME_DESC"
	case SortSpec_CRAWL_TIME_ASC:
		return "CRAWL_TIME_ASC"
	}
	return "<UNSET>"
}

func SortSpecFromString(s string) (SortSpec, error) {
	switch s {
	case "SCORE":
		return SortSpec_SCORE, nil
	case "TIME_DESC":
		return SortSpec_TIME_DESC, nil
	case "TIME_ASC":
		return SortSpec_TIME_ASC, nil
	case "CRAWL_TIME_DESC":
		return SortSpec_CRAWL_TIME_DESC, nil
	case "CRAWL_TIME_ASC":
		return SortSpec_CRAWL_TIME_ASC, nil
	}
	return SortSpec(0), fmt.Errorf("not a valid SortSpec string")
}

func SortSpecPtr(v SortSpec) *SortSpec { return &v }

func (p SortSpec) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *SortSpec) UnmarshalText(text []byte) error {
	q, err := SortSpecFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *SortSpec) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = SortSpec(v)
	return nil
}

func (p *SortSpec) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Attributes:
//  - Query
//  - Field
//  - Offset
//  - Count
//  - RoutingKey
type VideoRequest struct {
	Query      string      `thrift:"query,1,required" db:"query" json:"query"`
	Field      SearchField `thrift:"field,2,required" db:"field" json:"field"`
	Offset     int32       `thrift:"offset,3,required" db:"offset" json:"offset"`
	Count      int32       `thrift:"count,4,required" db:"count" json:"count"`
	RoutingKey *string     `thrift:"routingKey,5" db:"routingKey" json:"routingKey,omitempty"`
}

func NewVideoRequest() *VideoRequest {
	return &VideoRequest{
		Count: 20,
	}
}

func (p *VideoRequest) GetQuery() string {
	return p.Query
}

func (p *VideoRequest) GetField() SearchField {
	return p.Field
}

func (p *VideoRequest) GetOffset() int32 {
	return p.Offset
}

func (p *VideoRequest) GetCount() int32 {
	return p.Count
}

var VideoRequest_RoutingKey_DEFAULT string

func (p *VideoRequest) GetRoutingKey() string {
	if !p.IsSetRoutingKey() {
		return VideoRequest_RoutingKey_DEFAULT
	}
	return *p.RoutingKey
}
func (p *VideoRequest) IsSetRoutingKey() bool {
	return p.RoutingKey != nil
}

func (p *VideoRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetQuery bool = false
	var issetField bool = false
	var issetOffset bool = false
	var issetCount bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetQuery = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetField = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
			issetOffset = true
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
			issetCount = true
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetQuery {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Query is not set"))
	}
	if !issetField {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Field is not set"))
	}
	if !issetOffset {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Offset is not set"))
	}
	if !issetCount {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Count is not set"))
	}
	return nil
}

func (p *VideoRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Query = v
	}
	return nil
}

func (p *VideoRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := SearchField(v)
		p.Field = temp
	}
	return nil
}

func (p *VideoRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Offset = v
	}
	return nil
}

func (p *VideoRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *VideoRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.RoutingKey = &v
	}
	return nil
}

func (p *VideoRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("VideoRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *VideoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("query", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:query: ", p), err)
	}
	if err := oprot.WriteString(string(p.Query)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.query (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:query: ", p), err)
	}
	return err
}

func (p *VideoRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("field", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:field: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Field)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.field (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:field: ", p), err)
	}
	return err
}

func (p *VideoRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("offset", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:offset: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Offset)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.offset (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:offset: ", p), err)
	}
	return err
}

func (p *VideoRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:count: ", p), err)
	}
	return err
}

func (p *VideoRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetRoutingKey() {
		if err := oprot.WriteFieldBegin("routingKey", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:routingKey: ", p), err)
		}
		if err := oprot.WriteString(string(*p.RoutingKey)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.routingKey (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:routingKey: ", p), err)
		}
	}
	return err
}

func (p *VideoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoRequest(%+v)", *p)
}

// Attributes:
//  - Query
//  - Field
//  - Count
type SuggestRequest struct {
	Query string      `thrift:"query,1,required" db:"query" json:"query"`
	Field SearchField `thrift:"field,2,required" db:"field" json:"field"`
	Count int32       `thrift:"count,3,required" db:"count" json:"count"`
}

func NewSuggestRequest() *SuggestRequest {
	return &SuggestRequest{
		Count: 10,
	}
}

func (p *SuggestRequest) GetQuery() string {
	return p.Query
}

func (p *SuggestRequest) GetField() SearchField {
	return p.Field
}

func (p *SuggestRequest) GetCount() int32 {
	return p.Count
}
func (p *SuggestRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetQuery bool = false
	var issetField bool = false
	var issetCount bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetQuery = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetField = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
			issetCount = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetQuery {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Query is not set"))
	}
	if !issetField {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Field is not set"))
	}
	if !issetCount {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Count is not set"))
	}
	return nil
}

func (p *SuggestRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Query = v
	}
	return nil
}

func (p *SuggestRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := SearchField(v)
		p.Field = temp
	}
	return nil
}

func (p *SuggestRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *SuggestRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SuggestRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SuggestRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("query", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:query: ", p), err)
	}
	if err := oprot.WriteString(string(p.Query)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.query (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:query: ", p), err)
	}
	return err
}

func (p *SuggestRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("field", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:field: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Field)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.field (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:field: ", p), err)
	}
	return err
}

func (p *SuggestRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err)
	}
	return err
}

func (p *SuggestRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SuggestRequest(%+v)", *p)
}

// Attributes:
//  - ErrCode
//  - ErrMsg
//  - Hits
//  - Videos
type VideoResult_ struct {
	ErrCode int32     `thrift:"errCode,1,required" db:"errCode" json:"errCode"`
	ErrMsg  string    `thrift:"errMsg,2,required" db:"errMsg" json:"errMsg"`
	Hits    int32     `thrift:"hits,3,required" db:"hits" json:"hits"`
	Videos  *[]string `thrift:"videos,4" db:"videos" json:"videos,omitempty"`
}

func NewVideoResult_() *VideoResult_ {
	return &VideoResult_{
		ErrMsg: "OK",
	}
}

func (p *VideoResult_) GetErrCode() int32 {
	return p.ErrCode
}

func (p *VideoResult_) GetErrMsg() string {
	return p.ErrMsg
}

func (p *VideoResult_) GetHits() int32 {
	return p.Hits
}

var VideoResult__Videos_DEFAULT []string = []string{}

func (p *VideoResult_) GetVideos() []string {
	if !p.IsSetVideos() {
		return VideoResult__Videos_DEFAULT
	}
	return *p.Videos
}
func (p *VideoResult_) IsSetVideos() bool {
	return p.Videos != nil
}

func (p *VideoResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetErrCode bool = false
	var issetErrMsg bool = false
	var issetHits bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetErrCode = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
			issetErrMsg = true
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
			issetHits = true
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetErrCode {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrCode is not set"))
	}
	if !issetErrMsg {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrMsg is not set"))
	}
	if !issetHits {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Hits is not set"))
	}
	return nil
}

func (p *VideoResult_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ErrCode = v
	}
	return nil
}

func (p *VideoResult_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ErrMsg = v
	}
	return nil
}

func (p *VideoResult_) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Hits = v
	}
	return nil
}

func (p *VideoResult_) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Videos = &tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		(*p.Videos) = append((*p.Videos), _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *VideoResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("VideoResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *VideoResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("errCode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errCode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ErrCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.errCode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errCode: ", p), err)
	}
	return err
}

func (p *VideoResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("errMsg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:errMsg: ", p), err)
	}
	if err := oprot.WriteString(string(p.ErrMsg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.errMsg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:errMsg: ", p), err)
	}
	return err
}

func (p *VideoResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hits", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hits: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Hits)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hits (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hits: ", p), err)
	}
	return err
}

func (p *VideoResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetVideos() {
		if err := oprot.WriteFieldBegin("videos", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:videos: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(*p.Videos)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range *p.Videos {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:videos: ", p), err)
		}
	}
	return err
}

func (p *VideoResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoResult_(%+v)", *p)
}

// Attributes:
//  - Type
//  - LongVal
//  - DoubleVal
//  - StringVal
type PerfCounterVal struct {
	Type      int16    `thrift:"type,1,required" db:"type" json:"type"`
	LongVal   *int64   `thrift:"longVal,2" db:"longVal" json:"longVal,omitempty"`
	DoubleVal *float64 `thrift:"doubleVal,3" db:"doubleVal" json:"doubleVal,omitempty"`
	StringVal *string  `thrift:"stringVal,4" db:"stringVal" json:"stringVal,omitempty"`
}

func NewPerfCounterVal() *PerfCounterVal {
	return &PerfCounterVal{}
}

func (p *PerfCounterVal) GetType() int16 {
	return p.Type
}

var PerfCounterVal_LongVal_DEFAULT int64

func (p *PerfCounterVal) GetLongVal() int64 {
	if !p.IsSetLongVal() {
		return PerfCounterVal_LongVal_DEFAULT
	}
	return *p.LongVal
}

var PerfCounterVal_DoubleVal_DEFAULT float64

func (p *PerfCounterVal) GetDoubleVal() float64 {
	if !p.IsSetDoubleVal() {
		return PerfCounterVal_DoubleVal_DEFAULT
	}
	return *p.DoubleVal
}

var PerfCounterVal_StringVal_DEFAULT string

func (p *PerfCounterVal) GetStringVal() string {
	if !p.IsSetStringVal() {
		return PerfCounterVal_StringVal_DEFAULT
	}
	return *p.StringVal
}
func (p *PerfCounterVal) IsSetLongVal() bool {
	return p.LongVal != nil
}

func (p *PerfCounterVal) IsSetDoubleVal() bool {
	return p.DoubleVal != nil
}

func (p *PerfCounterVal) IsSetStringVal() bool {
	return p.StringVal != nil
}

func (p *PerfCounterVal) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetType bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetType = true
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"))
	}
	return nil
}

func (p *PerfCounterVal) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *PerfCounterVal) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.LongVal = &v
	}
	return nil
}

func (p *PerfCounterVal) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.DoubleVal = &v
	}
	return nil
}

func (p *PerfCounterVal) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.StringVal = &v
	}
	return nil
}

func (p *PerfCounterVal) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PerfCounterVal"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PerfCounterVal) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I16, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *PerfCounterVal) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetLongVal() {
		if err := oprot.WriteFieldBegin("longVal", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:longVal: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.LongVal)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.longVal (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:longVal: ", p), err)
		}
	}
	return err
}

func (p *PerfCounterVal) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDoubleVal() {
		if err := oprot.WriteFieldBegin("doubleVal", thrift.DOUBLE, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:doubleVal: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.DoubleVal)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.doubleVal (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:doubleVal: ", p), err)
		}
	}
	return err
}

func (p *PerfCounterVal) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStringVal() {
		if err := oprot.WriteFieldBegin("stringVal", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:stringVal: ", p), err)
		}
		if err := oprot.WriteString(string(*p.StringVal)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.stringVal (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:stringVal: ", p), err)
		}
	}
	return err
}

func (p *PerfCounterVal) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PerfCounterVal(%+v)", *p)
}

// Attributes:
//  - ID
//  - Query
//  - Type
//  - Category
//  - Source
//  - Cpapi
//  - Sort
//  - Page
//  - Limit
//  - Blacklist
type ContentRequest struct {
	ID        *string  `thrift:"id,1" db:"id" json:"id,omitempty"`
	Query     *string  `thrift:"query,2" db:"query" json:"query,omitempty"`
	Type      *string  `thrift:"type,3" db:"type" json:"type,omitempty"`
	Category  *string  `thrift:"category,4" db:"category" json:"category,omitempty"`
	Source    *string  `thrift:"source,5" db:"source" json:"source,omitempty"`
	Cpapi     *string  `thrift:"cpapi,6" db:"cpapi" json:"cpapi,omitempty"`
	Sort      SortSpec `thrift:"sort,7" db:"sort" json:"sort,omitempty"`
	Page      int32    `thrift:"page,8" db:"page" json:"page,omitempty"`
	Limit     int32    `thrift:"limit,9" db:"limit" json:"limit,omitempty"`
	Blacklist bool     `thrift:"blacklist,10" db:"blacklist" json:"blacklist,omitempty"`
}

func NewContentRequest() *ContentRequest {
	return &ContentRequest{
		Sort: 0,

		Page: 1,

		Limit: 30,
	}
}

var ContentRequest_ID_DEFAULT string

func (p *ContentRequest) GetID() string {
	if !p.IsSetID() {
		return ContentRequest_ID_DEFAULT
	}
	return *p.ID
}

var ContentRequest_Query_DEFAULT string

func (p *ContentRequest) GetQuery() string {
	if !p.IsSetQuery() {
		return ContentRequest_Query_DEFAULT
	}
	return *p.Query
}

var ContentRequest_Type_DEFAULT string

func (p *ContentRequest) GetType() string {
	if !p.IsSetType() {
		return ContentRequest_Type_DEFAULT
	}
	return *p.Type
}

var ContentRequest_Category_DEFAULT string

func (p *ContentRequest) GetCategory() string {
	if !p.IsSetCategory() {
		return ContentRequest_Category_DEFAULT
	}
	return *p.Category
}

var ContentRequest_Source_DEFAULT string

func (p *ContentRequest) GetSource() string {
	if !p.IsSetSource() {
		return ContentRequest_Source_DEFAULT
	}
	return *p.Source
}

var ContentRequest_Cpapi_DEFAULT string

func (p *ContentRequest) GetCpapi() string {
	if !p.IsSetCpapi() {
		return ContentRequest_Cpapi_DEFAULT
	}
	return *p.Cpapi
}

var ContentRequest_Sort_DEFAULT SortSpec = 0

func (p *ContentRequest) GetSort() SortSpec {
	return p.Sort
}

var ContentRequest_Page_DEFAULT int32 = 1

func (p *ContentRequest) GetPage() int32 {
	return p.Page
}

var ContentRequest_Limit_DEFAULT int32 = 30

func (p *ContentRequest) GetLimit() int32 {
	return p.Limit
}

var ContentRequest_Blacklist_DEFAULT bool = false

func (p *ContentRequest) GetBlacklist() bool {
	return p.Blacklist
}
func (p *ContentRequest) IsSetID() bool {
	return p.ID != nil
}

func (p *ContentRequest) IsSetQuery() bool {
	return p.Query != nil
}

func (p *ContentRequest) IsSetType() bool {
	return p.Type != nil
}

func (p *ContentRequest) IsSetCategory() bool {
	return p.Category != nil
}

func (p *ContentRequest) IsSetSource() bool {
	return p.Source != nil
}

func (p *ContentRequest) IsSetCpapi() bool {
	return p.Cpapi != nil
}

func (p *ContentRequest) IsSetSort() bool {
	return p.Sort != ContentRequest_Sort_DEFAULT
}

func (p *ContentRequest) IsSetPage() bool {
	return p.Page != ContentRequest_Page_DEFAULT
}

func (p *ContentRequest) IsSetLimit() bool {
	return p.Limit != ContentRequest_Limit_DEFAULT
}

func (p *ContentRequest) IsSetBlacklist() bool {
	return p.Blacklist != ContentRequest_Blacklist_DEFAULT
}

func (p *ContentRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ContentRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = &v
	}
	return nil
}

func (p *ContentRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Query = &v
	}
	return nil
}

func (p *ContentRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Type = &v
	}
	return nil
}

func (p *ContentRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Category = &v
	}
	return nil
}

func (p *ContentRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Source = &v
	}
	return nil
}

func (p *ContentRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Cpapi = &v
	}
	return nil
}

func (p *ContentRequest) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := SortSpec(v)
		p.Sort = temp
	}
	return nil
}

func (p *ContentRequest) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Page = v
	}
	return nil
}

func (p *ContentRequest) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Limit = v
	}
	return nil
}

func (p *ContentRequest) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Blacklist = v
	}
	return nil
}

func (p *ContentRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ContentRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ContentRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
		}
	}
	return err
}

func (p *ContentRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetQuery() {
		if err := oprot.WriteFieldBegin("query", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:query: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Query)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.query (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:query: ", p), err)
		}
	}
	return err
}

func (p *ContentRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err := oprot.WriteFieldBegin("type", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Type)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err)
		}
	}
	return err
}

func (p *ContentRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCategory() {
		if err := oprot.WriteFieldBegin("category", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:category: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Category)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.category (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:category: ", p), err)
		}
	}
	return err
}

func (p *ContentRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSource() {
		if err := oprot.WriteFieldBegin("source", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:source: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Source)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.source (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:source: ", p), err)
		}
	}
	return err
}

func (p *ContentRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCpapi() {
		if err := oprot.WriteFieldBegin("cpapi", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:cpapi: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Cpapi)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.cpapi (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:cpapi: ", p), err)
		}
	}
	return err
}

func (p *ContentRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetSort() {
		if err := oprot.WriteFieldBegin("sort", thrift.I32, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:sort: ", p), err)
		}
		if err := oprot.WriteI32(int32(p.Sort)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sort (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:sort: ", p), err)
		}
	}
	return err
}

func (p *ContentRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err := oprot.WriteFieldBegin("page", thrift.I32, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:page: ", p), err)
		}
		if err := oprot.WriteI32(int32(p.Page)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.page (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:page: ", p), err)
		}
	}
	return err
}

func (p *ContentRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetLimit() {
		if err := oprot.WriteFieldBegin("limit", thrift.I32, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:limit: ", p), err)
		}
		if err := oprot.WriteI32(int32(p.Limit)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.limit (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:limit: ", p), err)
		}
	}
	return err
}

func (p *ContentRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetBlacklist() {
		if err := oprot.WriteFieldBegin("blacklist", thrift.BOOL, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:blacklist: ", p), err)
		}
		if err := oprot.WriteBool(bool(p.Blacklist)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.blacklist (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:blacklist: ", p), err)
		}
	}
	return err
}

func (p *ContentRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContentRequest(%+v)", *p)
}

type MiliaoSharedService interface { //This a base service for all Miliao Thrift Service. All other services should extend this service.

	// Returns a descriptive name of the service
	GetName() (r string, err error)
	// Gets the counters for this service
	GetCounters() (r map[string]int64, err error)
	// Gets the counters start with prefix for this service
	//
	// Parameters:
	//  - Prefix
	GetCountersByCategory(prefix string) (r map[string]int64, err error)
	// Gets the names of counters for this service
	GetCounterNames() (r []string, err error)
	// Gets the value of a single counter
	//
	// Parameters:
	//  - Key
	GetCounter(key string) (r int64, err error)
	// Returns the unix time that the server has been running since
	AliveSince() (r int64, err error)
	// Suggest a stop to the server
	Shutdown() (err error)
	// Dynamically set the logger level. if name is null or empty, set the root logger.
	//
	// Parameters:
	//  - Name
	//  - Level
	SetLogLevel(name string, level string) (err error)
	GetPerfCounters() (r map[string]*PerfCounterVal, err error)
}

//This a base service for all Miliao Thrift Service. All other services should extend this service.
type MiliaoSharedServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewMiliaoSharedServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MiliaoSharedServiceClient {
	return &MiliaoSharedServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewMiliaoSharedServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MiliaoSharedServiceClient {
	return &MiliaoSharedServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Returns a descriptive name of the service
func (p *MiliaoSharedServiceClient) GetName() (r string, err error) {
	if err = p.sendGetName(); err != nil {
		return
	}
	return p.recvGetName()
}

func (p *MiliaoSharedServiceClient) sendGetName() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getName", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MiliaoSharedServiceGetNameArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MiliaoSharedServiceClient) recvGetName() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getName" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getName failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getName failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error1 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error2 error
		error2, err = error1.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error2
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getName failed: invalid message type")
		return
	}
	result := MiliaoSharedServiceGetNameResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Gets the counters for this service
func (p *MiliaoSharedServiceClient) GetCounters() (r map[string]int64, err error) {
	if err = p.sendGetCounters(); err != nil {
		return
	}
	return p.recvGetCounters()
}

func (p *MiliaoSharedServiceClient) sendGetCounters() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getCounters", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MiliaoSharedServiceGetCountersArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MiliaoSharedServiceClient) recvGetCounters() (value map[string]int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getCounters" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getCounters failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getCounters failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error3 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error4 error
		error4, err = error3.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error4
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getCounters failed: invalid message type")
		return
	}
	result := MiliaoSharedServiceGetCountersResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Gets the counters start with prefix for this service
//
// Parameters:
//  - Prefix
func (p *MiliaoSharedServiceClient) GetCountersByCategory(prefix string) (r map[string]int64, err error) {
	if err = p.sendGetCountersByCategory(prefix); err != nil {
		return
	}
	return p.recvGetCountersByCategory()
}

func (p *MiliaoSharedServiceClient) sendGetCountersByCategory(prefix string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getCountersByCategory", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MiliaoSharedServiceGetCountersByCategoryArgs{
		Prefix: prefix,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MiliaoSharedServiceClient) recvGetCountersByCategory() (value map[string]int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getCountersByCategory" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getCountersByCategory failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getCountersByCategory failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error5 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error6 error
		error6, err = error5.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error6
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getCountersByCategory failed: invalid message type")
		return
	}
	result := MiliaoSharedServiceGetCountersByCategoryResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Gets the names of counters for this service
func (p *MiliaoSharedServiceClient) GetCounterNames() (r []string, err error) {
	if err = p.sendGetCounterNames(); err != nil {
		return
	}
	return p.recvGetCounterNames()
}

func (p *MiliaoSharedServiceClient) sendGetCounterNames() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getCounterNames", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MiliaoSharedServiceGetCounterNamesArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MiliaoSharedServiceClient) recvGetCounterNames() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getCounterNames" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getCounterNames failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getCounterNames failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error7 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error8 error
		error8, err = error7.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error8
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getCounterNames failed: invalid message type")
		return
	}
	result := MiliaoSharedServiceGetCounterNamesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Gets the value of a single counter
//
// Parameters:
//  - Key
func (p *MiliaoSharedServiceClient) GetCounter(key string) (r int64, err error) {
	if err = p.sendGetCounter(key); err != nil {
		return
	}
	return p.recvGetCounter()
}

func (p *MiliaoSharedServiceClient) sendGetCounter(key string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getCounter", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MiliaoSharedServiceGetCounterArgs{
		Key: key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MiliaoSharedServiceClient) recvGetCounter() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getCounter" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getCounter failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getCounter failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error9 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error10 error
		error10, err = error9.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error10
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getCounter failed: invalid message type")
		return
	}
	result := MiliaoSharedServiceGetCounterResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Returns the unix time that the server has been running since
func (p *MiliaoSharedServiceClient) AliveSince() (r int64, err error) {
	if err = p.sendAliveSince(); err != nil {
		return
	}
	return p.recvAliveSince()
}

func (p *MiliaoSharedServiceClient) sendAliveSince() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("aliveSince", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MiliaoSharedServiceAliveSinceArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MiliaoSharedServiceClient) recvAliveSince() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "aliveSince" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "aliveSince failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "aliveSince failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error11 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error12 error
		error12, err = error11.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error12
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "aliveSince failed: invalid message type")
		return
	}
	result := MiliaoSharedServiceAliveSinceResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Suggest a stop to the server
func (p *MiliaoSharedServiceClient) Shutdown() (err error) {
	if err = p.sendShutdown(); err != nil {
		return
	}
	return
}

func (p *MiliaoSharedServiceClient) sendShutdown() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("shutdown", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := MiliaoSharedServiceShutdownArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// Dynamically set the logger level. if name is null or empty, set the root logger.
//
// Parameters:
//  - Name
//  - Level
func (p *MiliaoSharedServiceClient) SetLogLevel(name string, level string) (err error) {
	if err = p.sendSetLogLevel(name, level); err != nil {
		return
	}
	return
}

func (p *MiliaoSharedServiceClient) sendSetLogLevel(name string, level string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("setLogLevel", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := MiliaoSharedServiceSetLogLevelArgs{
		Name:  name,
		Level: level,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MiliaoSharedServiceClient) GetPerfCounters() (r map[string]*PerfCounterVal, err error) {
	if err = p.sendGetPerfCounters(); err != nil {
		return
	}
	return p.recvGetPerfCounters()
}

func (p *MiliaoSharedServiceClient) sendGetPerfCounters() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getPerfCounters", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MiliaoSharedServiceGetPerfCountersArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MiliaoSharedServiceClient) recvGetPerfCounters() (value map[string]*PerfCounterVal, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getPerfCounters" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getPerfCounters failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getPerfCounters failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error13 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error14 error
		error14, err = error13.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error14
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getPerfCounters failed: invalid message type")
		return
	}
	result := MiliaoSharedServiceGetPerfCountersResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type MiliaoSharedServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      MiliaoSharedService
}

func (p *MiliaoSharedServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *MiliaoSharedServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *MiliaoSharedServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewMiliaoSharedServiceProcessor(handler MiliaoSharedService) *MiliaoSharedServiceProcessor {

	self15 := &MiliaoSharedServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self15.processorMap["getName"] = &miliaoSharedServiceProcessorGetName{handler: handler}
	self15.processorMap["getCounters"] = &miliaoSharedServiceProcessorGetCounters{handler: handler}
	self15.processorMap["getCountersByCategory"] = &miliaoSharedServiceProcessorGetCountersByCategory{handler: handler}
	self15.processorMap["getCounterNames"] = &miliaoSharedServiceProcessorGetCounterNames{handler: handler}
	self15.processorMap["getCounter"] = &miliaoSharedServiceProcessorGetCounter{handler: handler}
	self15.processorMap["aliveSince"] = &miliaoSharedServiceProcessorAliveSince{handler: handler}
	self15.processorMap["shutdown"] = &miliaoSharedServiceProcessorShutdown{handler: handler}
	self15.processorMap["setLogLevel"] = &miliaoSharedServiceProcessorSetLogLevel{handler: handler}
	self15.processorMap["getPerfCounters"] = &miliaoSharedServiceProcessorGetPerfCounters{handler: handler}
	return self15
}

func (p *MiliaoSharedServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x16 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x16.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x16

}

type miliaoSharedServiceProcessorGetName struct {
	handler MiliaoSharedService
}

func (p *miliaoSharedServiceProcessorGetName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MiliaoSharedServiceGetNameArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getName", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MiliaoSharedServiceGetNameResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetName(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getName: "+err2.Error())
		oprot.WriteMessageBegin("getName", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getName", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type miliaoSharedServiceProcessorGetCounters struct {
	handler MiliaoSharedService
}

func (p *miliaoSharedServiceProcessorGetCounters) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MiliaoSharedServiceGetCountersArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getCounters", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MiliaoSharedServiceGetCountersResult{}
	var retval map[string]int64
	var err2 error
	if retval, err2 = p.handler.GetCounters(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCounters: "+err2.Error())
		oprot.WriteMessageBegin("getCounters", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getCounters", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type miliaoSharedServiceProcessorGetCountersByCategory struct {
	handler MiliaoSharedService
}

func (p *miliaoSharedServiceProcessorGetCountersByCategory) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MiliaoSharedServiceGetCountersByCategoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getCountersByCategory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MiliaoSharedServiceGetCountersByCategoryResult{}
	var retval map[string]int64
	var err2 error
	if retval, err2 = p.handler.GetCountersByCategory(args.Prefix); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCountersByCategory: "+err2.Error())
		oprot.WriteMessageBegin("getCountersByCategory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getCountersByCategory", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type miliaoSharedServiceProcessorGetCounterNames struct {
	handler MiliaoSharedService
}

func (p *miliaoSharedServiceProcessorGetCounterNames) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MiliaoSharedServiceGetCounterNamesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getCounterNames", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MiliaoSharedServiceGetCounterNamesResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetCounterNames(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCounterNames: "+err2.Error())
		oprot.WriteMessageBegin("getCounterNames", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getCounterNames", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type miliaoSharedServiceProcessorGetCounter struct {
	handler MiliaoSharedService
}

func (p *miliaoSharedServiceProcessorGetCounter) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MiliaoSharedServiceGetCounterArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getCounter", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MiliaoSharedServiceGetCounterResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.GetCounter(args.Key); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCounter: "+err2.Error())
		oprot.WriteMessageBegin("getCounter", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getCounter", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type miliaoSharedServiceProcessorAliveSince struct {
	handler MiliaoSharedService
}

func (p *miliaoSharedServiceProcessorAliveSince) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MiliaoSharedServiceAliveSinceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("aliveSince", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MiliaoSharedServiceAliveSinceResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.AliveSince(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing aliveSince: "+err2.Error())
		oprot.WriteMessageBegin("aliveSince", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("aliveSince", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type miliaoSharedServiceProcessorShutdown struct {
	handler MiliaoSharedService
}

func (p *miliaoSharedServiceProcessorShutdown) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MiliaoSharedServiceShutdownArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.Shutdown(); err2 != nil {
		return true, err2
	}
	return true, nil
}

type miliaoSharedServiceProcessorSetLogLevel struct {
	handler MiliaoSharedService
}

func (p *miliaoSharedServiceProcessorSetLogLevel) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MiliaoSharedServiceSetLogLevelArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.SetLogLevel(args.Name, args.Level); err2 != nil {
		return true, err2
	}
	return true, nil
}

type miliaoSharedServiceProcessorGetPerfCounters struct {
	handler MiliaoSharedService
}

func (p *miliaoSharedServiceProcessorGetPerfCounters) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MiliaoSharedServiceGetPerfCountersArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getPerfCounters", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MiliaoSharedServiceGetPerfCountersResult{}
	var retval map[string]*PerfCounterVal
	var err2 error
	if retval, err2 = p.handler.GetPerfCounters(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPerfCounters: "+err2.Error())
		oprot.WriteMessageBegin("getPerfCounters", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getPerfCounters", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type MiliaoSharedServiceGetNameArgs struct {
}

func NewMiliaoSharedServiceGetNameArgs() *MiliaoSharedServiceGetNameArgs {
	return &MiliaoSharedServiceGetNameArgs{}
}

func (p *MiliaoSharedServiceGetNameArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MiliaoSharedServiceGetNameArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getName_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MiliaoSharedServiceGetNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiliaoSharedServiceGetNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MiliaoSharedServiceGetNameResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMiliaoSharedServiceGetNameResult() *MiliaoSharedServiceGetNameResult {
	return &MiliaoSharedServiceGetNameResult{}
}

var MiliaoSharedServiceGetNameResult_Success_DEFAULT string

func (p *MiliaoSharedServiceGetNameResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return MiliaoSharedServiceGetNameResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *MiliaoSharedServiceGetNameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MiliaoSharedServiceGetNameResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MiliaoSharedServiceGetNameResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *MiliaoSharedServiceGetNameResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getName_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MiliaoSharedServiceGetNameResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MiliaoSharedServiceGetNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiliaoSharedServiceGetNameResult(%+v)", *p)
}

type MiliaoSharedServiceGetCountersArgs struct {
}

func NewMiliaoSharedServiceGetCountersArgs() *MiliaoSharedServiceGetCountersArgs {
	return &MiliaoSharedServiceGetCountersArgs{}
}

func (p *MiliaoSharedServiceGetCountersArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MiliaoSharedServiceGetCountersArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCounters_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MiliaoSharedServiceGetCountersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiliaoSharedServiceGetCountersArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MiliaoSharedServiceGetCountersResult struct {
	Success map[string]int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMiliaoSharedServiceGetCountersResult() *MiliaoSharedServiceGetCountersResult {
	return &MiliaoSharedServiceGetCountersResult{}
}

var MiliaoSharedServiceGetCountersResult_Success_DEFAULT map[string]int64

func (p *MiliaoSharedServiceGetCountersResult) GetSuccess() map[string]int64 {
	return p.Success
}
func (p *MiliaoSharedServiceGetCountersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MiliaoSharedServiceGetCountersResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MiliaoSharedServiceGetCountersResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]int64, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key17 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key17 = v
		}
		var _val18 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val18 = v
		}
		p.Success[_key17] = _val18
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *MiliaoSharedServiceGetCountersResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCounters_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MiliaoSharedServiceGetCountersResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MiliaoSharedServiceGetCountersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiliaoSharedServiceGetCountersResult(%+v)", *p)
}

// Attributes:
//  - Prefix
type MiliaoSharedServiceGetCountersByCategoryArgs struct {
	Prefix string `thrift:"prefix,1" db:"prefix" json:"prefix"`
}

func NewMiliaoSharedServiceGetCountersByCategoryArgs() *MiliaoSharedServiceGetCountersByCategoryArgs {
	return &MiliaoSharedServiceGetCountersByCategoryArgs{}
}

func (p *MiliaoSharedServiceGetCountersByCategoryArgs) GetPrefix() string {
	return p.Prefix
}
func (p *MiliaoSharedServiceGetCountersByCategoryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MiliaoSharedServiceGetCountersByCategoryArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Prefix = v
	}
	return nil
}

func (p *MiliaoSharedServiceGetCountersByCategoryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCountersByCategory_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MiliaoSharedServiceGetCountersByCategoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("prefix", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:prefix: ", p), err)
	}
	if err := oprot.WriteString(string(p.Prefix)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.prefix (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:prefix: ", p), err)
	}
	return err
}

func (p *MiliaoSharedServiceGetCountersByCategoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiliaoSharedServiceGetCountersByCategoryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MiliaoSharedServiceGetCountersByCategoryResult struct {
	Success map[string]int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMiliaoSharedServiceGetCountersByCategoryResult() *MiliaoSharedServiceGetCountersByCategoryResult {
	return &MiliaoSharedServiceGetCountersByCategoryResult{}
}

var MiliaoSharedServiceGetCountersByCategoryResult_Success_DEFAULT map[string]int64

func (p *MiliaoSharedServiceGetCountersByCategoryResult) GetSuccess() map[string]int64 {
	return p.Success
}
func (p *MiliaoSharedServiceGetCountersByCategoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MiliaoSharedServiceGetCountersByCategoryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MiliaoSharedServiceGetCountersByCategoryResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]int64, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key19 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key19 = v
		}
		var _val20 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val20 = v
		}
		p.Success[_key19] = _val20
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *MiliaoSharedServiceGetCountersByCategoryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCountersByCategory_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MiliaoSharedServiceGetCountersByCategoryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MiliaoSharedServiceGetCountersByCategoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiliaoSharedServiceGetCountersByCategoryResult(%+v)", *p)
}

type MiliaoSharedServiceGetCounterNamesArgs struct {
}

func NewMiliaoSharedServiceGetCounterNamesArgs() *MiliaoSharedServiceGetCounterNamesArgs {
	return &MiliaoSharedServiceGetCounterNamesArgs{}
}

func (p *MiliaoSharedServiceGetCounterNamesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MiliaoSharedServiceGetCounterNamesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCounterNames_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MiliaoSharedServiceGetCounterNamesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiliaoSharedServiceGetCounterNamesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MiliaoSharedServiceGetCounterNamesResult struct {
	Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMiliaoSharedServiceGetCounterNamesResult() *MiliaoSharedServiceGetCounterNamesResult {
	return &MiliaoSharedServiceGetCounterNamesResult{}
}

var MiliaoSharedServiceGetCounterNamesResult_Success_DEFAULT []string

func (p *MiliaoSharedServiceGetCounterNamesResult) GetSuccess() []string {
	return p.Success
}
func (p *MiliaoSharedServiceGetCounterNamesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MiliaoSharedServiceGetCounterNamesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MiliaoSharedServiceGetCounterNamesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem21 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem21 = v
		}
		p.Success = append(p.Success, _elem21)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MiliaoSharedServiceGetCounterNamesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCounterNames_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MiliaoSharedServiceGetCounterNamesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MiliaoSharedServiceGetCounterNamesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiliaoSharedServiceGetCounterNamesResult(%+v)", *p)
}

// Attributes:
//  - Key
type MiliaoSharedServiceGetCounterArgs struct {
	Key string `thrift:"key,1" db:"key" json:"key"`
}

func NewMiliaoSharedServiceGetCounterArgs() *MiliaoSharedServiceGetCounterArgs {
	return &MiliaoSharedServiceGetCounterArgs{}
}

func (p *MiliaoSharedServiceGetCounterArgs) GetKey() string {
	return p.Key
}
func (p *MiliaoSharedServiceGetCounterArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MiliaoSharedServiceGetCounterArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *MiliaoSharedServiceGetCounterArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCounter_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MiliaoSharedServiceGetCounterArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *MiliaoSharedServiceGetCounterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiliaoSharedServiceGetCounterArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MiliaoSharedServiceGetCounterResult struct {
	Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMiliaoSharedServiceGetCounterResult() *MiliaoSharedServiceGetCounterResult {
	return &MiliaoSharedServiceGetCounterResult{}
}

var MiliaoSharedServiceGetCounterResult_Success_DEFAULT int64

func (p *MiliaoSharedServiceGetCounterResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return MiliaoSharedServiceGetCounterResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *MiliaoSharedServiceGetCounterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MiliaoSharedServiceGetCounterResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MiliaoSharedServiceGetCounterResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *MiliaoSharedServiceGetCounterResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCounter_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MiliaoSharedServiceGetCounterResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MiliaoSharedServiceGetCounterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiliaoSharedServiceGetCounterResult(%+v)", *p)
}

type MiliaoSharedServiceAliveSinceArgs struct {
}

func NewMiliaoSharedServiceAliveSinceArgs() *MiliaoSharedServiceAliveSinceArgs {
	return &MiliaoSharedServiceAliveSinceArgs{}
}

func (p *MiliaoSharedServiceAliveSinceArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MiliaoSharedServiceAliveSinceArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("aliveSince_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MiliaoSharedServiceAliveSinceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiliaoSharedServiceAliveSinceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MiliaoSharedServiceAliveSinceResult struct {
	Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMiliaoSharedServiceAliveSinceResult() *MiliaoSharedServiceAliveSinceResult {
	return &MiliaoSharedServiceAliveSinceResult{}
}

var MiliaoSharedServiceAliveSinceResult_Success_DEFAULT int64

func (p *MiliaoSharedServiceAliveSinceResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return MiliaoSharedServiceAliveSinceResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *MiliaoSharedServiceAliveSinceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MiliaoSharedServiceAliveSinceResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MiliaoSharedServiceAliveSinceResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *MiliaoSharedServiceAliveSinceResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("aliveSince_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MiliaoSharedServiceAliveSinceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MiliaoSharedServiceAliveSinceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiliaoSharedServiceAliveSinceResult(%+v)", *p)
}

type MiliaoSharedServiceShutdownArgs struct {
}

func NewMiliaoSharedServiceShutdownArgs() *MiliaoSharedServiceShutdownArgs {
	return &MiliaoSharedServiceShutdownArgs{}
}

func (p *MiliaoSharedServiceShutdownArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MiliaoSharedServiceShutdownArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("shutdown_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MiliaoSharedServiceShutdownArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiliaoSharedServiceShutdownArgs(%+v)", *p)
}

// Attributes:
//  - Name
//  - Level
type MiliaoSharedServiceSetLogLevelArgs struct {
	Name  string `thrift:"name,1" db:"name" json:"name"`
	Level string `thrift:"level,2" db:"level" json:"level"`
}

func NewMiliaoSharedServiceSetLogLevelArgs() *MiliaoSharedServiceSetLogLevelArgs {
	return &MiliaoSharedServiceSetLogLevelArgs{}
}

func (p *MiliaoSharedServiceSetLogLevelArgs) GetName() string {
	return p.Name
}

func (p *MiliaoSharedServiceSetLogLevelArgs) GetLevel() string {
	return p.Level
}
func (p *MiliaoSharedServiceSetLogLevelArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MiliaoSharedServiceSetLogLevelArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *MiliaoSharedServiceSetLogLevelArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Level = v
	}
	return nil
}

func (p *MiliaoSharedServiceSetLogLevelArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setLogLevel_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MiliaoSharedServiceSetLogLevelArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *MiliaoSharedServiceSetLogLevelArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("level", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:level: ", p), err)
	}
	if err := oprot.WriteString(string(p.Level)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.level (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:level: ", p), err)
	}
	return err
}

func (p *MiliaoSharedServiceSetLogLevelArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiliaoSharedServiceSetLogLevelArgs(%+v)", *p)
}

type MiliaoSharedServiceGetPerfCountersArgs struct {
}

func NewMiliaoSharedServiceGetPerfCountersArgs() *MiliaoSharedServiceGetPerfCountersArgs {
	return &MiliaoSharedServiceGetPerfCountersArgs{}
}

func (p *MiliaoSharedServiceGetPerfCountersArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MiliaoSharedServiceGetPerfCountersArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPerfCounters_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MiliaoSharedServiceGetPerfCountersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiliaoSharedServiceGetPerfCountersArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MiliaoSharedServiceGetPerfCountersResult struct {
	Success map[string]*PerfCounterVal `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMiliaoSharedServiceGetPerfCountersResult() *MiliaoSharedServiceGetPerfCountersResult {
	return &MiliaoSharedServiceGetPerfCountersResult{}
}

var MiliaoSharedServiceGetPerfCountersResult_Success_DEFAULT map[string]*PerfCounterVal

func (p *MiliaoSharedServiceGetPerfCountersResult) GetSuccess() map[string]*PerfCounterVal {
	return p.Success
}
func (p *MiliaoSharedServiceGetPerfCountersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MiliaoSharedServiceGetPerfCountersResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MiliaoSharedServiceGetPerfCountersResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*PerfCounterVal, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key22 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key22 = v
		}
		_val23 := &PerfCounterVal{}
		if err := _val23.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val23), err)
		}
		p.Success[_key22] = _val23
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *MiliaoSharedServiceGetPerfCountersResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPerfCounters_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MiliaoSharedServiceGetPerfCountersResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MiliaoSharedServiceGetPerfCountersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MiliaoSharedServiceGetPerfCountersResult(%+v)", *p)
}

type FastVideoSearchService interface {
	MiliaoSharedService

	// Parameters:
	//  - Request
	Suggest(request *SuggestRequest) (r []string, err error)
	// Parameters:
	//  - Request
	Search(request *VideoRequest) (r *VideoResult_, err error)
}

type FastVideoSearchServiceClient struct {
	*MiliaoSharedServiceClient
}

func NewFastVideoSearchServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *FastVideoSearchServiceClient {
	return &FastVideoSearchServiceClient{MiliaoSharedServiceClient: NewMiliaoSharedServiceClientFactory(t, f)}
}

func NewFastVideoSearchServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *FastVideoSearchServiceClient {
	return &FastVideoSearchServiceClient{MiliaoSharedServiceClient: NewMiliaoSharedServiceClientProtocol(t, iprot, oprot)}
}

// Parameters:
//  - Request
func (p *FastVideoSearchServiceClient) Suggest(request *SuggestRequest) (r []string, err error) {
	if err = p.sendSuggest(request); err != nil {
		return
	}
	return p.recvSuggest()
}

func (p *FastVideoSearchServiceClient) sendSuggest(request *SuggestRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("suggest", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FastVideoSearchServiceSuggestArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FastVideoSearchServiceClient) recvSuggest() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "suggest" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "suggest failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "suggest failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error28 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error29 error
		error29, err = error28.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error29
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "suggest failed: invalid message type")
		return
	}
	result := FastVideoSearchServiceSuggestResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Request
func (p *FastVideoSearchServiceClient) Search(request *VideoRequest) (r *VideoResult_, err error) {
	if err = p.sendSearch(request); err != nil {
		return
	}
	return p.recvSearch()
}

func (p *FastVideoSearchServiceClient) sendSearch(request *VideoRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("search", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FastVideoSearchServiceSearchArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FastVideoSearchServiceClient) recvSearch() (value *VideoResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "search" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "search failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "search failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error30 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error31 error
		error31, err = error30.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error31
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "search failed: invalid message type")
		return
	}
	result := FastVideoSearchServiceSearchResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type FastVideoSearchServiceProcessor struct {
	*MiliaoSharedServiceProcessor
}

func NewFastVideoSearchServiceProcessor(handler FastVideoSearchService) *FastVideoSearchServiceProcessor {
	self32 := &FastVideoSearchServiceProcessor{NewMiliaoSharedServiceProcessor(handler)}
	self32.AddToProcessorMap("suggest", &fastVideoSearchServiceProcessorSuggest{handler: handler})
	self32.AddToProcessorMap("search", &fastVideoSearchServiceProcessorSearch{handler: handler})
	return self32
}

type fastVideoSearchServiceProcessorSuggest struct {
	handler FastVideoSearchService
}

func (p *fastVideoSearchServiceProcessorSuggest) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FastVideoSearchServiceSuggestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("suggest", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FastVideoSearchServiceSuggestResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.Suggest(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing suggest: "+err2.Error())
		oprot.WriteMessageBegin("suggest", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("suggest", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type fastVideoSearchServiceProcessorSearch struct {
	handler FastVideoSearchService
}

func (p *fastVideoSearchServiceProcessorSearch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FastVideoSearchServiceSearchArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("search", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FastVideoSearchServiceSearchResult{}
	var retval *VideoResult_
	var err2 error
	if retval, err2 = p.handler.Search(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing search: "+err2.Error())
		oprot.WriteMessageBegin("search", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("search", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type FastVideoSearchServiceSuggestArgs struct {
	Request *SuggestRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewFastVideoSearchServiceSuggestArgs() *FastVideoSearchServiceSuggestArgs {
	return &FastVideoSearchServiceSuggestArgs{}
}

var FastVideoSearchServiceSuggestArgs_Request_DEFAULT *SuggestRequest

func (p *FastVideoSearchServiceSuggestArgs) GetRequest() *SuggestRequest {
	if !p.IsSetRequest() {
		return FastVideoSearchServiceSuggestArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FastVideoSearchServiceSuggestArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FastVideoSearchServiceSuggestArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FastVideoSearchServiceSuggestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &SuggestRequest{
		Count: 10,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *FastVideoSearchServiceSuggestArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("suggest_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FastVideoSearchServiceSuggestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *FastVideoSearchServiceSuggestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FastVideoSearchServiceSuggestArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FastVideoSearchServiceSuggestResult struct {
	Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFastVideoSearchServiceSuggestResult() *FastVideoSearchServiceSuggestResult {
	return &FastVideoSearchServiceSuggestResult{}
}

var FastVideoSearchServiceSuggestResult_Success_DEFAULT []string

func (p *FastVideoSearchServiceSuggestResult) GetSuccess() []string {
	return p.Success
}
func (p *FastVideoSearchServiceSuggestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FastVideoSearchServiceSuggestResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FastVideoSearchServiceSuggestResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem33 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem33 = v
		}
		p.Success = append(p.Success, _elem33)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *FastVideoSearchServiceSuggestResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("suggest_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FastVideoSearchServiceSuggestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FastVideoSearchServiceSuggestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FastVideoSearchServiceSuggestResult(%+v)", *p)
}

// Attributes:
//  - Request
type FastVideoSearchServiceSearchArgs struct {
	Request *VideoRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewFastVideoSearchServiceSearchArgs() *FastVideoSearchServiceSearchArgs {
	return &FastVideoSearchServiceSearchArgs{}
}

var FastVideoSearchServiceSearchArgs_Request_DEFAULT *VideoRequest

func (p *FastVideoSearchServiceSearchArgs) GetRequest() *VideoRequest {
	if !p.IsSetRequest() {
		return FastVideoSearchServiceSearchArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *FastVideoSearchServiceSearchArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *FastVideoSearchServiceSearchArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FastVideoSearchServiceSearchArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &VideoRequest{
		Count: 20,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *FastVideoSearchServiceSearchArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("search_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FastVideoSearchServiceSearchArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *FastVideoSearchServiceSearchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FastVideoSearchServiceSearchArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FastVideoSearchServiceSearchResult struct {
	Success *VideoResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFastVideoSearchServiceSearchResult() *FastVideoSearchServiceSearchResult {
	return &FastVideoSearchServiceSearchResult{}
}

var FastVideoSearchServiceSearchResult_Success_DEFAULT *VideoResult_

func (p *FastVideoSearchServiceSearchResult) GetSuccess() *VideoResult_ {
	if !p.IsSetSuccess() {
		return FastVideoSearchServiceSearchResult_Success_DEFAULT
	}
	return p.Success
}
func (p *FastVideoSearchServiceSearchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FastVideoSearchServiceSearchResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FastVideoSearchServiceSearchResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &VideoResult_{
		ErrMsg: "OK",
	}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *FastVideoSearchServiceSearchResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("search_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FastVideoSearchServiceSearchResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FastVideoSearchServiceSearchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FastVideoSearchServiceSearchResult(%+v)", *p)
}

type ContentPoolSearchService interface {
	MiliaoSharedService

	// Parameters:
	//  - Request
	Search(request *ContentRequest) (r string, err error)
}

type ContentPoolSearchServiceClient struct {
	*MiliaoSharedServiceClient
}

func NewContentPoolSearchServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ContentPoolSearchServiceClient {
	return &ContentPoolSearchServiceClient{MiliaoSharedServiceClient: NewMiliaoSharedServiceClientFactory(t, f)}
}

func NewContentPoolSearchServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ContentPoolSearchServiceClient {
	return &ContentPoolSearchServiceClient{MiliaoSharedServiceClient: NewMiliaoSharedServiceClientProtocol(t, iprot, oprot)}
}

// Parameters:
//  - Request
func (p *ContentPoolSearchServiceClient) Search(request *ContentRequest) (r string, err error) {
	if err = p.sendSearch(request); err != nil {
		return
	}
	return p.recvSearch()
}

func (p *ContentPoolSearchServiceClient) sendSearch(request *ContentRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("search", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ContentPoolSearchServiceSearchArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ContentPoolSearchServiceClient) recvSearch() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "search" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "search failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "search failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error50 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error51 error
		error51, err = error50.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error51
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "search failed: invalid message type")
		return
	}
	result := ContentPoolSearchServiceSearchResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type ContentPoolSearchServiceProcessor struct {
	*MiliaoSharedServiceProcessor
}

func NewContentPoolSearchServiceProcessor(handler ContentPoolSearchService) *ContentPoolSearchServiceProcessor {
	self52 := &ContentPoolSearchServiceProcessor{NewMiliaoSharedServiceProcessor(handler)}
	self52.AddToProcessorMap("search", &contentPoolSearchServiceProcessorSearch{handler: handler})
	return self52
}

type contentPoolSearchServiceProcessorSearch struct {
	handler ContentPoolSearchService
}

func (p *contentPoolSearchServiceProcessorSearch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ContentPoolSearchServiceSearchArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("search", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ContentPoolSearchServiceSearchResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.Search(args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing search: "+err2.Error())
		oprot.WriteMessageBegin("search", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("search", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type ContentPoolSearchServiceSearchArgs struct {
	Request *ContentRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewContentPoolSearchServiceSearchArgs() *ContentPoolSearchServiceSearchArgs {
	return &ContentPoolSearchServiceSearchArgs{}
}

var ContentPoolSearchServiceSearchArgs_Request_DEFAULT *ContentRequest

func (p *ContentPoolSearchServiceSearchArgs) GetRequest() *ContentRequest {
	if !p.IsSetRequest() {
		return ContentPoolSearchServiceSearchArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *ContentPoolSearchServiceSearchArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ContentPoolSearchServiceSearchArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ContentPoolSearchServiceSearchArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &ContentRequest{
		Sort: 0,

		Page: 1,

		Limit: 30,
	}
	if err := p.Request.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *ContentPoolSearchServiceSearchArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("search_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ContentPoolSearchServiceSearchArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *ContentPoolSearchServiceSearchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContentPoolSearchServiceSearchArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ContentPoolSearchServiceSearchResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewContentPoolSearchServiceSearchResult() *ContentPoolSearchServiceSearchResult {
	return &ContentPoolSearchServiceSearchResult{}
}

var ContentPoolSearchServiceSearchResult_Success_DEFAULT string

func (p *ContentPoolSearchServiceSearchResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return ContentPoolSearchServiceSearchResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ContentPoolSearchServiceSearchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ContentPoolSearchServiceSearchResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ContentPoolSearchServiceSearchResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ContentPoolSearchServiceSearchResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("search_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ContentPoolSearchServiceSearchResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ContentPoolSearchServiceSearchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContentPoolSearchServiceSearchResult(%+v)", *p)
}
